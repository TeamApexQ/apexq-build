#!/bin/bash

#Cleanup
rm -f $WORKSPACE/*.zip $WORKSPACE/*.img
rm -f /var/lib/jenkins/jobs/apexq-staging-4.4/android/cm-11.0/out/target/product/apexqtmo/cm*.zip*
#rm -rf /var/lib/jenkins/jobs/apexq-staging-4.4/android/cm-11.0
rm -rf /var/lib/jenkins/jobs/apexq-staging-4.4/android/hudson
rm -rf /var/lib/jenkins/jobs/apexq-staging-4.4/workspace/*

#confirm existence of required paths
if [ ! -d ~/.kk_ccache ]; then mkdir ~/.kk_ccache; fi
if [ ! -d /var/lib/jenkins/jobs/apexq-staging-4.4/android/cm-11.0 ]; then mkdir /var/lib/jenkins/jobs/apexq-staging-4.4/android/cm-11.0; fi
if [ ! -d /var/lib/jenkins/jobs/apexq-staging-4.4/bin ]; then mkdir /var/lib/jenkins/jobs/apexq-staging-4.4/bin; fi

#initialize, synchronize, and reset repos.
cd /var/lib/jenkins/jobs/apexq-staging-4.4/android/cm-11.0
repo init -u git://github.com/CyanogenMod/android.git -b cm-11.0
if [ ! -d .repo/local_manifests ]; then mkdir .repo/local_manifests; fi
wget https://raw.github.com/TeamApexQ/apexq-build/cm-11.0/cm-11.0.xml -O .repo/local_manifests/cm-11.0.xml
repo sync
repo forall -c "git reset --hard"

#gerrit picks
wget https://raw.github.com/TeamApexQ/apexq-build/cm-11.0/repopick.py -O /var/lib/jenkins/jobs/apexq-staging-4.4/bin/repopick.py
python /var/lib/jenkins/jobs/apexq-staging-4.4/bin/repopick.py $GERRIT_CHANGES

#Setup
OUT=out/target/product/apexqtmo
cd vendor/cm
./get-prebuilts
cd ../..

#CCACHE
export PATH="$PATH:/opt/local/bin/:$PWD/prebuilts/misc/$(uname|awk '{print tolower($0)}')-x86/ccache"
export USE_CCACHE=1
export CCACHE_DIR=~/.kk_ccache
if [ ! "$(ccache -s|grep -E 'max cache size'|awk '{print $4}')" = "15.0" ]
then
	ccache -M 15G
fi

#Build
. ./build/envsetup.sh
if [ $CLEAN = "true" ]; then make clean; fi
brunch apexqtmo
if [ "0" -ne "$?" ]; then exit 1; fi

#Archive
if [ ! -d $WORKSPACE/archive ]; then mkdir $WORKSPACE/archive; fi
for f in $(ls $OUT/cm-*.zip*)
do
	targetf=`basename $f | sed "s/.zip$/-${BUILD_NO}.zip/g"`
	ln $f $WORKSPACE/archive/$targetf
done
if [ -f $OUT/boot.img ]
then
	cp $OUT/boot.img $WORKSPACE/archive
fi
if [ -f $OUT/recovery.img ]
then
	cp $OUT/recovery.img $WORKSPACE/archive
	mkdir -p $WORKSPACE/archive/META-INF/com/google/android
	wget https://raw.github.com/TeamApexQ/apexq-build/cm-11.0/update-binary -O $WORKSPACE/archive/META-INF/com/google/android/update-binary
	wget https://raw.github.com/TeamApexQ/apexq-build/cm-11.0/updater-script -O $WORKSPACE/archive/META-INF/com/google/android/updater-script
	cd $WORKSPACE/archive
	zip recovery.zip recovery.img META-INF/com/google/android/*
	rm -rf META-INF
fi

#Verify permissions
chmod -R ugo+r $WORKSPACE/archive

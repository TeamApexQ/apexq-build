From 3ce9e61481c0c6db58bf8d93e3d0d705b07d9870 Mon Sep 17 00:00:00 2001
From: Samir Mehta <samirn@codeaurora.org>
Date: Fri, 18 Jul 2014 10:57:41 +0530
Subject: [PATCH] Audio: fix compilation issues

1. keyCanOpenProxy, PROXY_OPEN_RETRY_COUNT etc.
2. Disable audio policy compilation.

Change-Id: Ie84b9e72982245287b6a8bb1783a5dd6e364f8fc
---
 legacy/alsa_sound/Android.mk                 |  2 ++
 legacy/alsa_sound/AudioHardwareALSA.cpp      |  4 ++--
 legacy/alsa_sound/AudioPolicyManagerALSA.cpp | 12 ++++++------
 legacy/alsa_sound/AudioPolicyManagerALSA.h   |  4 ++--
 legacy/alsa_sound/audio_policy_hal.cpp       |  4 ++--
 5 files changed, 14 insertions(+), 12 deletions(-)

diff --git a/legacy/alsa_sound/Android.mk b/legacy/alsa_sound/Android.mk
index bba1d2f..518a5cc 100644
--- a/legacy/alsa_sound/Android.mk
+++ b/legacy/alsa_sound/Android.mk
@@ -225,6 +225,7 @@ LOCAL_MODULE_TAGS := optional
 
 include $(BUILD_SHARED_LIBRARY)
 
+ifeq ($(USE_LEGACY_AUDIO_POLICY), 1)
 include $(CLEAR_VARS)
 
 LOCAL_CFLAGS += $(common_cflags)
@@ -259,5 +260,6 @@ LOCAL_SHARED_LIBRARIES := \
 LOCAL_C_INCLUDES += hardware/libhardware_legacy/audio
 
 include $(BUILD_SHARED_LIBRARY)
+endif
 
 endif
diff --git a/legacy/alsa_sound/AudioHardwareALSA.cpp b/legacy/alsa_sound/AudioHardwareALSA.cpp
index 0aca898..071e5b0 100644
--- a/legacy/alsa_sound/AudioHardwareALSA.cpp
+++ b/legacy/alsa_sound/AudioHardwareALSA.cpp
@@ -931,12 +931,12 @@ String8 AudioHardwareALSA::getParameters(const String8& keys)
     if (param.getInt(key, device) == NO_ERROR) {
         param.addInt(key, mCurDevice);
     }
-
+#ifdef QCOM_PROXY_DEVICE_ENABLED
     key = String8(AudioParameter::keyCanOpenProxy);
     if(param.get(key, value) == NO_ERROR) {
         param.addInt(key, mCanOpenProxy);
     }
-
+#endif
     key = String8(ECHO_SUPRESSION);
     if (param.get(key, value) == NO_ERROR) {
         value = String8("yes");
diff --git a/legacy/alsa_sound/AudioPolicyManagerALSA.cpp b/legacy/alsa_sound/AudioPolicyManagerALSA.cpp
index a123d17..aeee345 100644
--- a/legacy/alsa_sound/AudioPolicyManagerALSA.cpp
+++ b/legacy/alsa_sound/AudioPolicyManagerALSA.cpp
@@ -315,8 +315,8 @@ status_t AudioPolicyManager::setDeviceConnectionState(audio_devices_t device,
                     mScoDeviceAddress = String8(device_address, MAX_DEVICE_ADDRESS_LEN);
                 } else if (audio_is_usb_device(device)) {
                     // handle USB device connection
-                    mUsbCardAndDevice = String8(device_address, MAX_DEVICE_ADDRESS_LEN);
-                    paramStr = mUsbCardAndDevice;
+                    mUsbOutCardAndDevice = String8(device_address, MAX_DEVICE_ADDRESS_LEN);
+                    paramStr = mUsbOutCardAndDevice;
                 }
                 // not currently handling multiple simultaneous submixes: ignoring remote submix
                 //   case and address
@@ -353,7 +353,7 @@ status_t AudioPolicyManager::setDeviceConnectionState(audio_devices_t device,
                 mScoDeviceAddress = "";
             } else if (audio_is_usb_device(device)) {
                 // handle USB device disconnection
-                mUsbCardAndDevice = "";
+                mUsbOutCardAndDevice = "";
 
                 AudioParameter param;
                 param.add(String8("usb_connected"), String8("false"));
@@ -533,7 +533,7 @@ AudioSystem::device_connection_state AudioPolicyManager::getDeviceConnectionStat
                 return state;
             }
             if (audio_is_usb_device(device) &&
-                ((address != "" && mUsbCardAndDevice != address))) {
+                ((address != "" && mUsbOutCardAndDevice != address))) {
                 ALOGE("getDeviceConnectionState() invalid device: %x", device);
                 return state;
             }
@@ -1054,8 +1054,8 @@ status_t AudioPolicyManager::stopOutput(audio_io_handle_t output,
 
 audio_io_handle_t AudioPolicyManager::getInput(int inputSource,
                                     uint32_t samplingRate,
-                                    uint32_t format,
-                                    uint32_t channelMask,
+                                    audio_format_t format,
+                                    audio_channel_mask_t channelMask,
                                     AudioSystem::audio_in_acoustics acoustics)
 {
     audio_io_handle_t input = 0;
diff --git a/legacy/alsa_sound/AudioPolicyManagerALSA.h b/legacy/alsa_sound/AudioPolicyManagerALSA.h
index 4fb550a..53ea704 100644
--- a/legacy/alsa_sound/AudioPolicyManagerALSA.h
+++ b/legacy/alsa_sound/AudioPolicyManagerALSA.h
@@ -74,8 +74,8 @@ public:
         virtual void releaseOutput(audio_io_handle_t output);
         virtual audio_io_handle_t getInput(int inputSource,
                                             uint32_t samplingRate,
-                                            uint32_t format,
-                                            uint32_t channels,
+                                            audio_format_t format,
+                                            audio_channel_mask_t channels,
                                             AudioSystem::audio_in_acoustics acoustics);
 
         // indicates to the audio policy manager that the input starts being used.
diff --git a/legacy/alsa_sound/audio_policy_hal.cpp b/legacy/alsa_sound/audio_policy_hal.cpp
index e003e74..ec31c98 100644
--- a/legacy/alsa_sound/audio_policy_hal.cpp
+++ b/legacy/alsa_sound/audio_policy_hal.cpp
@@ -148,7 +148,7 @@ static audio_io_handle_t ap_get_output(struct audio_policy *pol,
     ALOGV("%s: tid %d", __func__, gettid());
     return qap->apm->getOutput((AudioSystem::stream_type)stream,
                                sampling_rate, format, channels,
-                               (AudioSystem::output_flags)flags);
+                               (AudioSystem::output_flags)flags, offloadInfo);
 }
 
 static int ap_start_output(struct audio_policy *pol, audio_io_handle_t output,
@@ -177,7 +177,7 @@ static void ap_release_output(struct audio_policy *pol,
 static audio_io_handle_t ap_get_input(struct audio_policy *pol, audio_source_t inputSource,
                                       uint32_t sampling_rate,
                                       audio_format_t format,
-                                      uint32_t channels,
+                                      audio_channel_mask_t channels,
                                       audio_in_acoustics_t acoustics)
 {
     struct qcom_audio_policy *qap = to_qap(pol);
-- 
1.9.3

